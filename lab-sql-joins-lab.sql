USE sakila;

-- 1. List the number of films per category.
	-- Number of films: COUNT(film_id) FROM film
    -- Category: category_id FROM film_category
    -- Category name: name FROM category
    -- Common columns: film_id (film and film_category) and category_id (film_category and category)
    -- GROUP BY c.name
    
SELECT c.name, COUNT(f.film_id) AS "number of films per category"
FROM film f
JOIN film_category fc
USING (film_id)
JOIN category c
USING (category_id)
GROUP BY c.name;  

    
-- 2. Retrieve the store ID, city, and country for each store.
	-- Store ID:  store_id FROM store
    -- City: city FROM city
    -- Country: country FROM country
    -- Common columns: Store -> Address (address_id), Address->City (city_id), city --> Country (country_id)

SELECT s.store_id, c.city, co.country
FROM store s
JOIN address a
USING (address_id)
JOIN city c 
USING (city_id)
JOIN country co
USING (country_id);

-- 3.  Calculate the total revenue generated by each store in dollars.
	-- Revenue generated: (SUM(amount)" " $) FROM payment
    -- Store: store_id FROM inventory
    -- Common columns: Payment --> Rental (rental_id), Rental --> inventory (inventory_id)
    -- GROUP BY: store_id

SELECT  i.store_id, CONCAT("$", FORMAT(SUM(p.amount),2)) AS "Total revenue in dollars"
FROM payment p
JOIN rental r
USING (rental_id)
JOIN inventory i
USING (inventory_id)
GROUP BY i.store_id;


-- 4.  Determine the average running time of films for each category.
	-- average runing time: AVG(length) FROM film
    -- category: name FROM category
    -- Common columns: Film --> film_category (film_id),  film_category --> category (category_id)
    -- GROUP BY: c.name

SELECT c.name, AVG(f.length)
FROM film f
JOIN film_category fc
USING (film_id)
JOIN category c
USING (category_id)
GROUP BY c.name;

-- 5.  Identify the film categories with the longest average running time.
	-- average runing time: AVG(length) FROM film
    -- category: name FROM category
    -- Common columns: Film --> film_category (film_id),  film_category --> category (category_id)
	-- GROUP BY c.name and ORFER BY AVG(length) DESC limit 1. 
    
SELECT c.name, AVG(f.length) AS "average length"
FROM film f
JOIN film_category fc
USING (film_id)
JOIN category c
USING (category_id)
GROUP BY c.name
ORDER BY AVG(f.length) DESC LIMIT 1;


-- 6.  Display the top 10 most frequently rented movies in descending order.
	-- Frequency of rented: COUNT (renatl_id) FROM rental;
    -- TOP 10 most frequent: ORDER BY DESC Limit 10;
    -- Common columns: Rental --> Inventory (inventory_id), Inventory --> Film (film_id)

SELECT f.title, COUNT(r.rental_id)
FROM rental r
JOIN inventory i
USING (inventory_id)
JOIN film f
USING (film_id)
GROUP BY f.film_id;
    
SELECT inventory_id FROM inventory;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
	-- Get film_id of "Academy Dinosaur" and check if it's in inventory_id
    -- Common columns: film --> inventory (film_id)
    -- Check disposal: WHERE f.title = "Academy Dinosaur" AND i.store_id = 1

SELECT f.title, f.film_id, i.inventory_id, i.store_id
FROM film f
JOIN inventory i 
USING (film_id)
WHERE f.title = 'Academy Dinosaur'
AND i.store_id = 1;

-- 8.  List of ALL film titles and if they are available in inventory.
	-- List all list titles: DISTINCT(title) FROM film
    -- Common columns: film --> inventory (film_id)
    -- LEFT JOIN to get the list of the titles that have a value in inventory_id

SELECT DISTINCT(f.title)
FROM film f
LEFT JOIN inventory i 
ON f.film_id = i.film_id;


